tosca_definitions_version: cloudify_dsl_1_3
 
description: >
  VyOS - vRouter blueprint
 
imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/cpe-types.yaml
  - types/web-server-ops-type.yaml
  - types/haproxy.yaml
 
inputs:
  external_network_name:
    type: string

  webserver_port:
    type: integer
    default: 80  
 
  mgmt_net:
    type: string
    default: cloudify-management-network

  mgmt_cidr:
    type: string

  dmz_network_name:
    type: string
    default: dmz_network

  dmz_subnet_name:
    type: string
    default: dmz_subnet
 
  data_plane_network_name:
    type: string
    default: data_plane_network
 
  data_plane_subnet_name:
    type: string
    default: data_plane_subnet
 
  vrouter_data_plane_port_name:
    type: string
    default: vrouter_data_plane_port
   
  vfirewall_dataplane_port_name:
    type: string
    default: vfirewall_data_plane_port
  
  vfirewall_dmz_port_name:
    type: string
    default: vfirewall_dmz_port

  vids_dmz_port_name:
    type: string
    default: vids_dmz_port

  haproxy_dmz_port_name:
    type: string
    default: haproxy_dmz_port
   
  security_group_name:
    type: string
    default: vnf_test_security_group
 
  keypair_name:
    type: string
    default: cfy-agt-key
 
  ssh_key_filename:
    type: string
    default: ~/.ssh/agent_key.pem
 
  vrouter_name:
    type: string
    default: VyOS Router
 
  vrouter_img_id:
    type: string
 
  vrouter_flavor_id:
    type: string
 
  agent_user:
    type: string
    default: ubuntu
 
  vfirewall_name:
    type: string
    default: vFirewall
 
  image:
    type: string
 
  flavor:
    type: string

  vids_name: 
    type: string
    default: vIDS Snort

  vids_img_id:
    type: string

  vids_flavor_id:
    type: string

  number_of_instances:
    description: |
      The number of web server instances. Requests to the web servers will
      be load balanced by the haproxy service.
    type: integer
    default: 2

 
node_templates:
 
  ######################################################
  #                   VyOS router                      #
  ######################################################
 
  vrouter_host:
    type: cloudify.openstack.nodes.Server
    properties:     
      resource_id: { get_input: vrouter_name }
      install_agent: false
      server:
        image: { get_input: vrouter_img_id }
        flavor: { get_input: vrouter_flavor_id }
      management_network_name: { get_input: mgmt_net }
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair        
      - target: vrouter_data_plane_port
        type: cloudify.openstack.server_connected_to_port
      - target: vrouter_fl_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group
 
  ######################################################
  #                   IPtables Firewall                #
  ###################################################### 
  
  iptables_daemon:
    type: cpe.daemon.IPtables
    relationships:
      - type: cloudify.relationships.contained_in
        target: vfirewall_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          inputs:
            process:
              env:
                DMZ_CIDR: { get_property: [ dmz_subnet, subnet, cidr ] }

  nDPI_daemon:
    type: cpe.daemon.nDPI
    relationships:
      - type: cloudify.relationships.contained_in
        target: vfirewall_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            process:
              env:
                MGMT_CIDR: { get_input: mgmt_cidr } 
 
  vfirewall_host:
    type: e2e.nodes.MonitoredServer
    properties:     
      resource_id: { get_input: vfirewall_name }
      agent_config:
        key: { get_property: [ keypair, private_key_path ] }
      management_network_name: { get_input: mgmt_net }
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: vfirewall_data_plane_port
        type: cloudify.openstack.server_connected_to_port 
      - target: vfirewall_dmz_port
        type: cloudify.openstack.server_connected_to_port  
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group

  ######################################################
  #                   vIDS Snort                       #
  ######################################################
 
  vids_host:
    type: cloudify.openstack.nodes.Server
    properties:     
      resource_id: { get_input: vids_name }
      agent_config:
        key: { get_property: [ keypair, private_key_path ] }
      management_network_name: { get_input: mgmt_net }
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair        
      - target: vids_dmz_port
        type: cloudify.openstack.server_connected_to_port
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group

  ######################################################
  #                   Webserver                        #
  ######################################################

  apache2:
    type: apache.nodes.WebServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: webserver_host
      - type: app_connected_to_haproxy
        target: haproxy
        
  webserver_host:
    type: e2e.nodes.MonitoredServer

    properties:
      agent_config:
        key: { get_property: [ keypair, private_key_path ] }
      management_network_name: { get_input: mgmt_net }

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [ webserver_security_group, external_name ]}]

    relationships:
      - type: cloudify.relationships.contained_in
        target: websrv_node_scaling_tier
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_port
        target: webserver_dmz_port
      - target: webserver_security_group
        type: cloudify.openstack.server_connected_to_security_group

  ######################################################
  #                   Load Balancer                    #
  ######################################################

  haproxy:
    type: e2e.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ apache2, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  haproxy_frontend_host:
    type: e2e.nodes.MonitoredServer

    properties:
      agent_config:
        key: { get_property: [ keypair, private_key_path ] }
      management_network_name: { get_input: mgmt_net }

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [ haproxy_frontend_security_group, external_name ]}]

    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: webapp_ip
      - type: cloudify.openstack.server_connected_to_port
        target: haproxy_dmz_port
      - type: cloudify.openstack.server_connected_to_security_group
        target: haproxy_frontend_security_group

  ######################################################
  #                   Ports configuration              #
  ######################################################
 
  vrouter_data_plane_port:
    type: cloudify.openstack.nodes.Port
    properties:     
      resource_id: { get_input: vrouter_data_plane_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: data_plane_network
      - type: cloudify.relationships.depends_on
        target: data_plane_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
 
  vfirewall_data_plane_port:
    type: cloudify.openstack.nodes.Port
    properties:     
      resource_id: { get_input: vfirewall_dataplane_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: data_plane_network
      - type: cloudify.relationships.depends_on
        target: data_plane_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  vfirewall_dmz_port:
    type: cloudify.openstack.nodes.Port
    properties:     
      resource_id: { get_input: vfirewall_dmz_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: dmz_network
      - type: cloudify.relationships.depends_on
        target: dmz_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
  
  vids_dmz_port: 
    type: cloudify.openstack.nodes.Port
    properties:
      resource_id: { get_input: vids_dmz_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: dmz_network
      - type: cloudify.relationships.depends_on
        target: dmz_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  webserver_dmz_port: 
    type: cloudify.openstack.nodes.Port
    relationships:
      - type: cloudify.relationships.contained_in
        target: websrv_node_scaling_tier
      - type: cloudify.relationships.connected_to
        target: dmz_network
      - type: cloudify.relationships.depends_on
        target: dmz_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: webserver_security_group

  haproxy_dmz_port: 
    type: cloudify.openstack.nodes.Port
    properties:
      resource_id: { get_input: haproxy_dmz_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: dmz_network
      - type: cloudify.relationships.depends_on
        target: dmz_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: webserver_security_group
       
  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:     
      resource_id: { get_input: security_group_name }
      security_group:
        description: Security group for vnf test
      rules:
        - port: 3000
          remote_ip_prefix: 0.0.0.0/0
        - port: 80
          remote_ip_prefix: 0.0.0.0/0
        - port: 443
          remote_ip_prefix: 0.0.0.0/0
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - protocol: icmp
          port_range_min: 0
          port_range_max: 0
          remote_ip_prefix: 0.0.0.0/0
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0

  webserver_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: webserver_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ apache2, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 22

  haproxy_frontend_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: haproxy_frontend_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ haproxy, frontend_port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ haproxy, statistics_port ]}
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
   
  vrouter_fl_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }

  webapp_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
 
  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: true
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: ssh_key_filename }
 
  data_plane_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: data_plane_subnet_name }
      subnet:
        ip_version: 4
        cidr: 12.0.0.0/24
        gateway_ip: null      
    relationships:
      - target: data_plane_network
        type: cloudify.relationships.contained_in
 
  data_plane_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: data_plane_network_name }   

  dmz_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: dmz_subnet_name }
      subnet:
        ip_version: 4
        cidr: 11.0.0.0/24
        gateway_ip: null      
    relationships:
      - target: dmz_network
        type: cloudify.relationships.contained_in
 
  dmz_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: dmz_network_name }   

  websrv_node_scaling_tier:
    type: cloudify.nodes.Root

groups:
  webserver_and_dmzport:
    members: [webserver_host, webserver_dmz_port]

policies:
  scale_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: number_of_instances }
    targets: [webserver_and_dmzport]
 
outputs:
 
  vnfs:
    description: Information of vnf.
    value:
      vrouter_vnf:
        vnf_name: { get_property: [ vrouter_host, resource_id ] }
        floating_ip: { get_attribute: [ vrouter_fl_ip, floating_ip_address ] }
        public_key_path: { get_property: [ keypair, private_key_path ] }
      vfirewall_vnf:
        vnf_name: { get_property: [ vfirewall_host, resource_id ] }
        public_key_path: { get_property: [ keypair, private_key_path ] }
      vids_vnf:
        vnf_name: { get_property: [ vids_host, resource_id ] }
        public_key_path: { get_property: [ keypair, private_key_path ] }
       
 
  networks:
    description: Information of network.
    value:
      data_plane_network:
        network_name: { get_property: [ data_plane_network, resource_id ] }
