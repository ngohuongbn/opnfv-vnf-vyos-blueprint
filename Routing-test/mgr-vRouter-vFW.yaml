tosca_definitions_version: cloudify_dsl_1_3
 
description: >
  VyOS - vRouter blueprint
 
imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/cpe-types.yaml
 
inputs:
  external_network_name:
    type: string
 
  mgmt_net:
    type: string
    default: cloudify-management-network

  mgmt_cidr:
    type: string

  dmz_network_name:
    type: string
    default: dmz_network

  dmz_subnet_name:
    type: string
    default: dmz_subnet
 
  data_plane_network_name:
    type: string
    default: data_plane_network
 
  data_plane_subnet_name:
    type: string
    default: data_plane_subnet
 
  vrouter_data_plane_port_name:
    type: string
    default: vrouter_data_plane_port
   
  vfirewall_dataplane_port_name:
    type: string
    default: vfirewall_data_plane_port
  
  vfirewall_dmz_port_name:
    type: string
    default: vfirewall_dmz_port
 
  security_group_name:
    type: string
    default: vnf_test_security_group
 
  keypair_name:
    type: string
    default: cfy-agt-key
 
  ssh_key_filename:
    type: string
    default: ~/.ssh/agent_key.pem
 
  vrouter_name:
    type: string
    default: vrouter-vyos
 
  vrouter_img_id:
    type: string
 
  vrouter_flavor_id:
    type: string
 
  vfirewall_agent_user:
    type: string
    default: ubuntu
 
  vfirewall_name:
    type: string
    default: vfirewall_iptables
 
  vfirewall_img_id:
    type: string
 
  vfirewall_flavor_id:
    type: string
    
  dataplane_port_address_pairs:
    default: []
    
  use_existing_dataplane_port:
    type: boolean
    default: false
 
node_templates:
 
  ######################################################
  #                   VyOS router                      #
  ######################################################
 
  vrouter_host:
    type: cloudify.openstack.nodes.Server
    properties:     
      resource_id: { get_input: vrouter_name }
      install_agent: false
      server:
        image: { get_input: vrouter_img_id }
        flavor: { get_input: vrouter_flavor_id }
      management_network_name: { get_input: mgmt_net }
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair        
      - target: vrouter_data_plane_port
        type: cloudify.openstack.server_connected_to_port
      - target: vrouter_fl_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group
 
  ######################################################
  #                   IPtables Firewall                #
  ###################################################### 
  iptables_daemon:
    type: cpe.daemon.IPtables
    relationships:
      - type: cloudify.relationships.contained_in
        target: vfirewall_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          inputs:
            process:
              env:
                DMZ_CIDR: { get_property: [ dmz_subnet, subnet, cidr ] }

  vfirewall_host:
    type: cpe.nodes.Firewall
    properties:     
      resource_id: { get_input: vfirewall_name }
      agent_config:
        key: { get_property: [ keypair, private_key_path ] }
      management_network_name: { get_input: mgmt_net }
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: vfirewall_data_plane_port
        type: cloudify.openstack.server_connected_to_port 
      - target: vfirewall_dmz_port
        type: cloudify.openstack.server_connected_to_port  
      - target: vfirewall_fl_ip
        type: cloudify.openstack.server_connected_to_floating_ip   
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group
 
  vrouter_data_plane_port:
    type: cloudify.openstack.nodes.Port
    properties:      
      use_external_resource: { get_input: use_existing_dataplane_port }
      resource_id: { get_input: vrouter_data_plane_port_name }
      fixed_ip: { get_input: example_openstack_private_test_port_fixed_ip }
    relationships:
      - type: cloudify.relationships.contained_in
        target: data_plane_network
      - type: cloudify.relationships.depends_on
        target: data_plane_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

 
  vfirewall_data_plane_port:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource: { get_input: use_existing_dataplane_port }
      resource_id: { get_input: vfirewall_dataplane_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: data_plane_network
      - type: cloudify.relationships.depends_on
        target: data_plane_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
 
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.neutron_plugin.port.create
          inputs:
            args:
              allowed_address_pairs: { get_input: dataplane_port_address_pairs }

  vfirewall_dmz_port:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource: { get_input: use_existing_dataplane_port }
      resource_id: { get_input: vfirewall_dmz_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: dmz_network
      - type: cloudify.relationships.depends_on
        target: dmz_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.neutron_plugin.port.create
          inputs:
            args:
              allowed_address_pairs: { get_input: dataplane_port_address_pairs }
 
  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:     
      resource_id: { get_input: security_group_name }
      security_group:
        description: Security group for vnf test
      rules:
        - port: 3000
          remote_ip_prefix: 0.0.0.0/0
        - port: 80
          remote_ip_prefix: 0.0.0.0/0
        - port: 443
          remote_ip_prefix: 0.0.0.0/0
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - protocol: icmp
          port_range_min: 0
          port_range_max: 0
          remote_ip_prefix: 0.0.0.0/0
        - protocol: tcp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0
        - protocol: udp
          port_range_min: 1
          port_range_max: 65535
          remote_ip_prefix: 0.0.0.0/0
   
  vrouter_fl_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }

  vfirewall_fl_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
 
  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: true
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: ssh_key_filename }
 
  data_plane_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: data_plane_subnet_name }
      subnet:
        ip_version: 4
        cidr: 12.0.0.0/24
        gateway_ip: null      
    relationships:
      - target: data_plane_network
        type: cloudify.relationships.contained_in
 
  data_plane_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: data_plane_network_name }   

  dmz_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: dmz_subnet_name }
      subnet:
        ip_version: 4
        cidr: 11.0.0.0/24
        gateway_ip: null      
    relationships:
      - target: dmz_network
        type: cloudify.relationships.contained_in
 
  dmz_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: dmz_network_name }     
 
outputs:
 
  vnfs:
    description: Infomation of vnf.
    value:
      vrouter_vnf:
        vnf_name: { get_property: [ vrouter_host, resource_id ] }
        floating_ip: { get_attribute: [ vrouter_fl_ip, floating_ip_address ] }
        public_key_path: { get_property: [ keypair, private_key_path ] }
      vfirewall_vnf:
        vnf_name: { get_property: [ vfirewall_host, resource_id ] }
        floating_ip: { get_attribute: [ vfirewall_fl_ip, floating_ip_address ] }
        public_key_path: { get_property: [ keypair, private_key_path ] }
       
 
  networks:
    description: Infomation of network.
    value:
      data_plane_network:
        network_name: { get_property: [ data_plane_network, resource_id ] }
